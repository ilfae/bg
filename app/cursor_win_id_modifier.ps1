
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::InputEncoding = [System.Text.Encoding]::UTF8

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ VT
if ($PSVersionTable.PSVersion.Major -ge 5 -and $host.UI.RawUI -ne $null) {
    $host.UI.RawUI.SupportsVirtualTerminal = $true
}
$OutputEncoding = [System.Text.Encoding]::UTF8
chcp 65001 | Out-Null

$RED = "`e[31m"
$GREEN = "`e[32m"
$YELLOW = "`e[33m"
$BLUE = "`e[34m"
$NC = "`e[0m"

$STORAGE_FILE = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
$BACKUP_DIR = "$env:APPDATA\Cursor\User\globalStorage\backups"

function Generate-RandomString {
    param([int]$Length)
    $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    $result = ""
    for ($i = 0; $i -lt $Length; $i++) {
        $result += $chars[(Get-Random -Maximum $chars.Length)]
    }
    return $result
}

function Modify-CursorJSFiles {
    Write-Host ""
    Write-Host "$BLUEüîß [–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —è–¥—Ä–∞]$NC –ù–∞—á–∞–ª–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ JS-—Ñ–∞–π–ª–æ–≤ —è–¥—Ä–∞ Cursor –¥–ª—è –æ–±—Ö–æ–¥–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞..."
    Write-Host ""

    $cursorAppPath = "${env:LOCALAPPDATA}\Programs\Cursor"
    if (-not (Test-Path $cursorAppPath)) {
        $alternatePaths = @(
            "${env:ProgramFiles}\Cursor",
            "${env:ProgramFiles(x86)}\Cursor",
            "${env:USERPROFILE}\AppData\Local\Programs\Cursor"
        )

        foreach ($path in $alternatePaths) {
            if (Test-Path $path) {
                $cursorAppPath = $path
                break
            }
        }

        if (-not (Test-Path $cursorAppPath)) {
            Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Cursor –Ω–µ –Ω–∞–π–¥–µ–Ω"
            Write-Host "$YELLOWüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Cursor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            return $false
        }
    }

    Write-Host "$GREEN‚úÖ [–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ]$NC –ù–∞–π–¥–µ–Ω –ø—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $cursorAppPath"

    $newUuid = [System.Guid]::NewGuid().ToString().ToLower()
    $machineId = "auth0|user_$(Generate-RandomString -Length 32)"
    $deviceId = [System.Guid]::NewGuid().ToString().ToLower()
    $macMachineId = Generate-RandomString -Length 64

    Write-Host "$GREENüîë [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è]$NC –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"

    $jsFiles = @(
        "$cursorAppPath\resources\app\out\vs\workbench\api\node\extensionHostProcess.js",
        "$cursorAppPath\resources\app\out\main.js",
        "$cursorAppPath\resources\app\out\vs\code\node\cliProcessMain.js"
    )

    $modifiedCount = 0
    $needModification = $false

    Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è JS-—Ñ–∞–π–ª–æ–≤..."
    foreach ($file in $jsFiles) {
        if (-not (Test-Path $file)) {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $(Split-Path $file -Leaf)"
            continue
        }

        $content = Get-Content $file -Raw -ErrorAction SilentlyContinue
        if ($content -and $content -notmatch "return crypto\.randomUUID\(\)") {
            Write-Host "$BLUEüìù [–¢—Ä–µ–±—É–µ—Ç—Å—è]$NC –§–∞–π–ª —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: $(Split-Path $file -Leaf)"
            $needModification = $true
            break
        } else {
            Write-Host "$GREEN‚úÖ [–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω]$NC –§–∞–π–ª —É–∂–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: $(Split-Path $file -Leaf)"
        }
    }

    if (-not $needModification) {
        Write-Host "$GREEN‚úÖ [–ü—Ä–æ–ø—É—Å–∫]$NC –í—Å–µ JS-—Ñ–∞–π–ª—ã —É–∂–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã"
        return $true
    }

    Write-Host "$BLUEüîÑ [–ó–∞–∫—Ä—ã—Ç–∏–µ]$NC –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤..."
    Stop-AllCursorProcesses -MaxRetries 3 -WaitSeconds 3 | Out-Null

    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupPath = "$env:TEMP\Cursor_JS_Backup_$timestamp"

    Write-Host "$BLUEüíæ [–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ]$NC –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ JS-—Ñ–∞–π–ª–æ–≤ Cursor..."
    try {
        New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
        foreach ($file in $jsFiles) {
            if (Test-Path $file) {
                $fileName = Split-Path $file -Leaf
                Copy-Item $file "$backupPath\$fileName" -Force
            }
        }
        Write-Host "$GREEN‚úÖ [–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ]$NC –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupPath"
    } catch {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: $($_.Exception.Message)"
        return $false
    }

    Write-Host "$BLUEüîß [–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è]$NC –ù–∞—á–∞–ª–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ JS-—Ñ–∞–π–ª–æ–≤..."

    foreach ($file in $jsFiles) {
        if (-not (Test-Path $file)) {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–æ–ø—É—Å–∫]$NC –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $(Split-Path $file -Leaf)"
            continue
        }

        Write-Host "$BLUEüìù [–û–±—Ä–∞–±–æ—Ç–∫–∞]$NC –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: $(Split-Path $file -Leaf)"

        try {
            $content = Get-Content $file -Raw -Encoding UTF8

            if ($content -match "return crypto\.randomUUID\(\)" -or $content -match "// Cursor ID –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è") {
                Write-Host "$GREEN‚úÖ [–ü—Ä–æ–ø—É—Å–∫]$NC –§–∞–π–ª —É–∂–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
                $modifiedCount++
                continue
            }

            $timestampVar = [DateTimeOffset]::Now.ToUnixTimeSeconds()
            $injectCode = @"
import crypto from 'crypto';
const originalRandomUUID_${timestampVar} = crypto.randomUUID;
crypto.randomUUID = function() {
    return '${newUuid}';
};
globalThis.getMachineId = function() { return '${machineId}'; };
globalThis.getDeviceId = function() { return '${deviceId}'; };
globalThis.macMachineId = '${macMachineId}';
if (typeof window !== 'undefined') {
    window.getMachineId = globalThis.getMachineId;
    window.getDeviceId = globalThis.getDeviceId;
    window.macMachineId = globalThis.macMachineId;
}
console.log('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Cursor —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã');
"@

            if ($content -match "IOPlatformUUID") {
                Write-Host "$BLUEüîç [–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ]$NC –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ IOPlatformUUID"

                if ($content -match "function a\$") {
                    $content = $content -replace "function a\$\(t\)\{switch", "function a`$(t){return crypto.randomUUID(); switch"
                    Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –§—É–Ω–∫—Ü–∏—è a`$ —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞"
                    $modifiedCount++
                    continue
                }

                $content = $injectCode + $content
                Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                $modifiedCount++
            }
            elseif ($content -match "function t\$\(\)" -or $content -match "async function y5") {
                Write-Host "$BLUEüîç [–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ]$NC –ù–∞–π–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"

                if ($content -match "function t\$\(\)") {
                    $content = $content -replace "function t\$\(\)\{", "function t`$(){return `"00:00:00:00:00:00`";"
                    Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞"
                }

                if ($content -match "async function y5") {
                    $content = $content -replace "async function y5\(t\)\{", "async function y5(t){return crypto.randomUUID();"
                    Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –§—É–Ω–∫—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞"
                }

                $modifiedCount++
            }
            else {
                Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –®–∞–±–ª–æ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è"
                $content = $injectCode + $content
                $modifiedCount++
            }

            Set-Content -Path $file -Value $content -Encoding UTF8 -NoNewline
            Write-Host "$GREEN‚úÖ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: $(Split-Path $file -Leaf)"

        } catch {
            Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: $($_.Exception.Message)"
            $fileName = Split-Path $file -Leaf
            $backupFile = "$backupPath\$fileName"
            if (Test-Path $backupFile) {
                Copy-Item $backupFile $file -Force
                Write-Host "$YELLOWüîÑ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
            }
        }
    }

    if ($modifiedCount -gt 0) {
        Write-Host ""
        Write-Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –£—Å–ø–µ—à–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ $modifiedCount JS-—Ñ–∞–π–ª–æ–≤"
        Write-Host "$BLUEüíæ [–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ]$NC –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: $backupPath"
        Write-Host "$BLUEüí° [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –§—É–Ω–∫—Ü–∏—è JS-–∏–Ω—ä–µ–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        return $true
    } else {
        Write-Host "$RED‚ùå [–°–±–æ–π]$NC –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã"
        return $false
    }
}

function Remove-CursorTrialFolders {
    Write-Host ""
    Write-Host "$GREENüéØ [–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω—ã—Ö –ø–∞–ø–æ–∫ Cursor Pro..."
    Write-Host "$BLUEüìã [–û–ø–∏—Å–∞–Ω–∏–µ]$NC –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ Cursor –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
    Write-Host ""

    $foldersToDelete = @()
    $adminPaths = @(
        "C:\Users\Administrator\.cursor",
        "C:\Users\Administrator\AppData\Roaming\Cursor"
    )
    $currentUserPaths = @(
        "$env:USERPROFILE\.cursor",
        "$env:APPDATA\Cursor"
    )
    $foldersToDelete += $adminPaths
    $foldersToDelete += $currentUserPaths

    Write-Host "$BLUEüìÇ [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ë—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–ø–∫–∏:"
    foreach ($folder in $foldersToDelete) {
        Write-Host "   üìÅ $folder"
    }
    Write-Host ""

    $deletedCount = 0
    $skippedCount = 0
    $errorCount = 0

    foreach ($folder in $foldersToDelete) {
        Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏: $folder"

        if (Test-Path $folder) {
            try {
                Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –ü–∞–ø–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–∏–µ..."
                Remove-Item -Path $folder -Recurse -Force -ErrorAction Stop
                Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: $folder"
                $deletedCount++
            }
            catch {
                Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏: $folder"
                Write-Host "$REDüí• [–î–µ—Ç–∞–ª–∏]$NC –û—à–∏–±–∫–∞: $($_.Exception.Message)"
                $errorCount++
            }
        } else {
            Write-Host "$YELLOW‚è≠Ô∏è  [–ü—Ä–æ–ø—É—Å–∫]$NC –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $folder"
            $skippedCount++
        }
        Write-Host ""
    }

    Write-Host "$GREENüìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]$NC –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"
    Write-Host "   ‚úÖ –£–¥–∞–ª–µ–Ω–æ: $deletedCount –ø–∞–ø–æ–∫"
    Write-Host "   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: $skippedCount –ø–∞–ø–æ–∫"
    Write-Host "   ‚ùå –û—à–∏–±–æ–∫: $errorCount –ø–∞–ø–æ–∫"
    Write-Host ""

    if ($deletedCount -gt 0) {
        Write-Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã—Ö –ø–∞–ø–æ–∫ Cursor Pro –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

        Write-Host "$BLUEüîß [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤..."
        $cursorAppData = "$env:APPDATA\Cursor"
        $cursorLocalAppData = "$env:LOCALAPPDATA\cursor"
        $cursorUserProfile = "$env:USERPROFILE\.cursor"

        try {
            if (-not (Test-Path $cursorAppData)) {
                New-Item -ItemType Directory -Path $cursorAppData -Force | Out-Null
            }
            if (-not (Test-Path $cursorUserProfile)) {
                New-Item -ItemType Directory -Path $cursorUserProfile -Force | Out-Null
            }
            Write-Host "$GREEN‚úÖ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        } catch {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤: $($_.Exception.Message)"
        }
    } else {
        Write-Host "$YELLOWü§î [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –¶–µ–ª–µ–≤—ã–µ –ø–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã"
    }
    Write-Host ""
}

function Restart-CursorAndWait {
    Write-Host ""
    Write-Host "$GREENüîÑ [–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫]$NC –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Cursor –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    if (-not $global:CursorProcessInfo) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ Cursor –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        return $false
    }

    $cursorPath = $global:CursorProcessInfo.Path
    if ($cursorPath -is [array]) {
        $cursorPath = $cursorPath[0]
    }

    if ([string]::IsNullOrEmpty($cursorPath)) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ü—É—Ç—å –∫ Cursor –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        return $false
    }

    Write-Host "$BLUEüìç [–ü—É—Ç—å]$NC –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—É—Ç—å: $cursorPath"

    if (-not (Test-Path $cursorPath)) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Cursor –Ω–µ –Ω–∞–π–¥–µ–Ω: $cursorPath"

        $backupPaths = @(
            "$env:LOCALAPPDATA\Programs\cursor\Cursor.exe",
            "$env:PROGRAMFILES\Cursor\Cursor.exe",
            "$env:PROGRAMFILES(X86)\Cursor\Cursor.exe"
        )

        $foundPath = $null
        foreach ($backupPath in $backupPaths) {
            if (Test-Path $backupPath) {
                $foundPath = $backupPath
                Write-Host "$GREENüí° [–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ]$NC –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: $foundPath"
                break
            }
        }

        if (-not $foundPath) {
            Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Cursor –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return $false
        }

        $cursorPath = $foundPath
    }

    try {
        Write-Host "$GREENüöÄ [–ó–∞–ø—É—Å–∫]$NC –ó–∞–ø—É—Å–∫ Cursor..."
        $process = Start-Process -FilePath $cursorPath -PassThru -WindowStyle Hidden

        Write-Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (20 —Å–µ–∫—É–Ω–¥)..."
        Start-Sleep -Seconds 20

        $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
        $maxWait = 45
        $waited = 0

        while (-not (Test-Path $configPath) -and $waited -lt $maxWait) {
            Write-Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏... ($waited/$maxWait —Å–µ–∫)"
            Start-Sleep -Seconds 1
            $waited++
        }

        if (Test-Path $configPath) {
            Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: $configPath"
            Write-Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ (5 —Å–µ–∫—É–Ω–¥)..."
            Start-Sleep -Seconds 5
        } else {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
            Write-Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ Cursor"
        }

        Write-Host "$YELLOWüîÑ [–ó–∞–∫—Ä—ã—Ç–∏–µ]$NC –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Cursor –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        if ($process -and -not $process.HasExited) {
            $process.Kill()
            $process.WaitForExit(5000)
        }

        Get-Process -Name "Cursor" -ErrorAction SilentlyContinue | Stop-Process -Force
        Get-Process -Name "cursor" -ErrorAction SilentlyContinue | Stop-Process -Force

        Write-Host "$GREEN‚úÖ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        return $true

    } catch {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Cursor: $($_.Exception.Message)"
        Write-Host "$BLUEüí° [–û—Ç–ª–∞–¥–∫–∞]$NC –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: $($_.Exception.GetType().FullName)"
        return $false
    }
}

function Stop-AllCursorProcesses {
    param(
        [int]$MaxRetries = 3,
        [int]$WaitSeconds = 5
    )

    Write-Host "$BLUEüîí [–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor..."

    $cursorProcessNames = @(
        "Cursor",
        "cursor",
        "Cursor Helper",
        "Cursor Helper (GPU)",
        "Cursor Helper (Plugin)",
        "Cursor Helper (Renderer)",
        "CursorUpdater"
    )

    for ($retry = 1; $retry -le $MaxRetries; $retry++) {
        Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü–æ–ø—ã—Ç–∫–∞ $retry/$MaxRetries..."

        $foundProcesses = @()
        foreach ($processName in $cursorProcessNames) {
            $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if ($processes) {
                $foundProcesses += $processes
                Write-Host "$YELLOW‚ö†Ô∏è  [–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ]$NC –ü—Ä–æ—Ü–µ—Å—Å: $processName (PID: $($processes.Id -join ', '))"
            }
        }

        if ($foundProcesses.Count -eq 0) {
            Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Cursor –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
            return $true
        }

        Write-Host "$YELLOWüîÑ [–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ]$NC –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ $($foundProcesses.Count) –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor..."

        foreach ($process in $foundProcesses) {
            try {
                $process.CloseMainWindow() | Out-Null
                Write-Host "$BLUE  ‚Ä¢ Graceful –∑–∞–∫—Ä—ã—Ç–∏–µ: $($process.ProcessName) (PID: $($process.Id))$NC"
            } catch {
                Write-Host "$YELLOW  ‚Ä¢ Graceful –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: $($process.ProcessName)$NC"
            }
        }

        Start-Sleep -Seconds 3

        foreach ($processName in $cursorProcessNames) {
            $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if ($processes) {
                foreach ($process in $processes) {
                    try {
                        Stop-Process -Id $process.Id -Force
                        Write-Host "$RED  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: $($process.ProcessName) (PID: $($process.Id))$NC"
                    } catch {
                        Write-Host "$RED  ‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: $($process.ProcessName)$NC"
                    }
                }
            }
        }

        if ($retry -lt $MaxRetries) {
            Write-Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –û–∂–∏–¥–∞–Ω–∏–µ $WaitSeconds —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π..."
            Start-Sleep -Seconds $WaitSeconds
        }
    }

    Write-Host "$RED‚ùå [–°–±–æ–π]$NC –ü—Ä–æ—Ü–µ—Å—Å—ã Cursor –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ $MaxRetries –ø–æ–ø—ã—Ç–æ–∫"
    return $false
}

function Test-FileAccessibility {
    param([string]$FilePath)
    Write-Host "$BLUEüîê [–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: $(Split-Path $FilePath -Leaf)"

    if (-not (Test-Path $FilePath)) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return $false
    }

    try {
        $fileStream = [System.IO.File]::Open($FilePath, 'Open', 'ReadWrite', 'None')
        $fileStream.Close()
        Write-Host "$GREEN‚úÖ [–ü—Ä–∞–≤–∞]$NC –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏"
        return $true
    } catch [System.IO.IOException] {
        Write-Host "$RED‚ùå [–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞]$NC –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º: $($_.Exception.Message)"
        return $false
    } catch [System.UnauthorizedAccessException] {
        Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–∞–≤–∞]$NC –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

        try {
            $file = Get-Item $FilePath
            if ($file.IsReadOnly) {
                $file.IsReadOnly = $false
                Write-Host "$GREEN‚úÖ [–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ]$NC –ê—Ç—Ä–∏–±—É—Ç '—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ' —Å–Ω—è—Ç"
            }

            $fileStream = [System.IO.File]::Open($FilePath, 'Open', 'ReadWrite', 'None')
            $fileStream.Close()
            Write-Host "$GREEN‚úÖ [–ü—Ä–∞–≤–∞]$NC –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
            return $true
        } catch {
            Write-Host "$RED‚ùå [–ü—Ä–∞–≤–∞]$NC –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞: $($_.Exception.Message)"
            return $false
        }
    } catch {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $($_.Exception.Message)"
        return $false
    }
}

function Invoke-CursorInitialization {
    Write-Host ""
    Write-Host "$GREENüßπ [–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è]$NC –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Cursor..."
    $BASE_PATH = "$env:APPDATA\Cursor\User"

    $filesToDelete = @(
        (Join-Path -Path $BASE_PATH -ChildPath "globalStorage\state.vscdb"),
        (Join-Path -Path $BASE_PATH -ChildPath "globalStorage\state.vscdb.backup")
    )

    $folderToCleanContents = Join-Path -Path $BASE_PATH -ChildPath "History"
    $folderToDeleteCompletely = Join-Path -Path $BASE_PATH -ChildPath "workspaceStorage"

    Write-Host "$BLUEüîç [–û—Ç–ª–∞–¥–∫–∞]$NC –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: $BASE_PATH"

    foreach ($file in $filesToDelete) {
        Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞: $file"
        if (Test-Path $file) {
            try {
                Remove-Item -Path $file -Force -ErrorAction Stop
                Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –§–∞–π–ª —É–¥–∞–ª–µ–Ω: $file"
            }
            catch {
                Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}: $($_.Exception.Message)"
            }
        } else {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–æ–ø—É—Å–∫]$NC –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $file"
        }
    }

    Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏: $folderToCleanContents"
    if (Test-Path $folderToCleanContents) {
        try {
            Get-ChildItem -Path $folderToCleanContents -Recurse | Remove-Item -Force -Recurse -ErrorAction Stop
            Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –æ—á–∏—â–µ–Ω–æ: $folderToCleanContents"
        }
        catch {
            Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ ${folderToCleanContents}: $($_.Exception.Message)"
        }
    } else {
        Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–æ–ø—É—Å–∫]$NC –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $folderToCleanContents"
    }

    Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏: $folderToDeleteCompletely"
    if (Test-Path $folderToDeleteCompletely) {
        try {
            Remove-Item -Path $folderToDeleteCompletely -Recurse -Force -ErrorAction Stop
            Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: $folderToDeleteCompletely"
        }
        catch {
            Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ ${folderToDeleteCompletely}: $($_.Exception.Message)"
        }
    } else {
        Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–æ–ø—É—Å–∫]$NC –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $folderToDeleteCompletely"
    }

    Write-Host "$GREEN‚úÖ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Cursor –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    Write-Host ""
}

function Update-MachineGuid {
    try {
        Write-Host "$BLUEüîß [–†–µ–µ—Å—Ç—Ä]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ (MachineGuid)..."

        $registryPath = "HKLM:\SOFTWARE\Microsoft\Cryptography"
        if (-not (Test-Path $registryPath)) {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –ü—É—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $registryPath, —Å–æ–∑–¥–∞–Ω–∏–µ..."
            New-Item -Path $registryPath -Force | Out-Null
            Write-Host "$GREEN‚úÖ [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –ü—É—Ç—å —Ä–µ–µ—Å—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω"
        }

        $originalGuid = ""
        try {
            $currentGuid = Get-ItemProperty -Path $registryPath -Name MachineGuid -ErrorAction SilentlyContinue
            if ($currentGuid) {
                $originalGuid = $currentGuid.MachineGuid
                Write-Host "$GREEN‚úÖ [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞:"
                Write-Host "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography"
                Write-Host "    MachineGuid    REG_SZ    $originalGuid"
            } else {
                Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –ó–Ω–∞—á–µ–Ω–∏–µ MachineGuid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ"
            }
        } catch {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: $($_.Exception.Message)"
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MachineGuid"
        }

        $backupFile = $null
        if ($originalGuid) {
            $backupFile = "$BACKUP_DIR\MachineGuid_$(Get-Date -Format 'yyyyMMdd_HHmmss').reg"
            Write-Host "$BLUEüíæ [–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ]$NC –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞..."
            $backupResult = Start-Process "reg.exe" -ArgumentList "export", "`"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography`"", "`"$backupFile`"" -NoNewWindow -Wait -PassThru

            if ($backupResult.ExitCode -eq 0) {
                Write-Host "$GREEN‚úÖ [–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ]$NC –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupFile"
            } else {
                Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ..."
                $backupFile = $null
            }
        }

        $newGuid = [System.Guid]::NewGuid().ToString()
        Write-Host "$BLUEüîÑ [–ì–µ–Ω–µ—Ä–∞—Ü–∏—è]$NC –ù–æ–≤—ã–π MachineGuid: $newGuid"

        Set-ItemProperty -Path $registryPath -Name MachineGuid -Value $newGuid -Force -ErrorAction Stop

        $verifyGuid = (Get-ItemProperty -Path $registryPath -Name MachineGuid -ErrorAction Stop).MachineGuid
        if ($verifyGuid -ne $newGuid) {
            throw "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ($verifyGuid) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É ($newGuid)"
        }

        Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –†–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:"
        Write-Host "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography"
        Write-Host "    MachineGuid    REG_SZ    $newGuid"
        return $true
    }
    catch {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–µ—Å—Ç—Ä–æ–º: $($_.Exception.Message)"

        if ($backupFile -and (Test-Path $backupFile)) {
            Write-Host "$YELLOWüîÑ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
            $restoreResult = Start-Process "reg.exe" -ArgumentList "import", "`"$backupFile`"" -NoNewWindow -Wait -PassThru

            if ($restoreResult.ExitCode -eq 0) {
                Write-Host "$GREEN‚úÖ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            } else {
                Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: $backupFile"
            }
        } else {
            Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
        }

        return $false
    }
}

function Test-CursorEnvironment {
    param([string]$Mode = "FULL")
    Write-Host ""
    Write-Host "$BLUEüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è Cursor..."

    $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
    $cursorAppData = "$env:APPDATA\Cursor"
    $issues = @()

    if (-not (Test-Path $configPath)) {
        $issues += "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $configPath"
    } else {
        try {
            $content = Get-Content $configPath -Raw -Encoding UTF8 -ErrorAction Stop
            $config = $content | ConvertFrom-Json -ErrorAction Stop
            Write-Host "$GREEN‚úÖ [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –§–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
        } catch {
            $issues += "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $($_.Exception.Message)"
        }
    }

    if (-not (Test-Path $cursorAppData)) {
        $issues += "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $cursorAppData"
    }

    $cursorPaths = @(
        "$env:LOCALAPPDATA\Programs\cursor\Cursor.exe",
        "$env:PROGRAMFILES\Cursor\Cursor.exe",
        "$env:PROGRAMFILES(X86)\Cursor\Cursor.exe"
    )

    $cursorFound = $false
    foreach ($path in $cursorPaths) {
        if (Test-Path $path) {
            Write-Host "$GREEN‚úÖ [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ù–∞–π–¥–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Cursor: $path"
            $cursorFound = $true
            break
        }
    }

    if (-not $cursorFound) {
        $issues += "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Cursor –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    }

    if ($issues.Count -eq 0) {
        Write-Host "$GREEN‚úÖ [–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è]$NC –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
        return @{ Success = $true; Issues = @() }
    } else {
        Write-Host "$RED‚ùå [–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è]$NC –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $($issues.Count) –ø—Ä–æ–±–ª–µ–º:"
        foreach ($issue in $issues) {
            Write-Host "$RED  ‚Ä¢ ${issue}$NC"
        }
        return @{ Success = $false; Issues = $issues }
    }
}

function Modify-MachineCodeConfig {
    param([string]$Mode = "FULL")
    Write-Host ""
    Write-Host "$GREENüõ†Ô∏è  [–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞..."

    $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"

    if (-not (Test-Path $configPath)) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $configPath"
        Write-Host ""
        Write-Host "$YELLOWüí° [–†–µ—à–µ–Ω–∏–µ]$NC –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        Write-Host "$BLUE  1Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –≤—Ä—É—á–Ω—É—é$NC"
        Write-Host "$BLUE  2Ô∏è‚É£  –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (~30 —Å–µ–∫—É–Ω–¥)$NC"
        Write-Host "$BLUE  3Ô∏è‚É£  –ó–∞–∫—Ä–æ–π—Ç–µ Cursor$NC"
        Write-Host "$BLUE  4Ô∏è‚É£  –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç$NC"
        Write-Host ""
        Write-Host "$YELLOW‚ö†Ô∏è  [–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞]$NC –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è:"
        Write-Host "$BLUE  ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ '–°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞'$NC"
        Write-Host "$BLUE  ‚Ä¢ –≠—Ç–∞ –æ–ø—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª$NC"
        Write-Host ""

        $userChoice = Read-Host "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Cursor –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞? (y/n)"
        if ($userChoice -match "^(y|yes)$") {
            Write-Host "$BLUEüöÄ [–ü–æ–ø—ã—Ç–∫–∞]$NC –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor..."
            return Start-CursorToGenerateConfig
        }
        return $false
    }

    if ($Mode -eq "MODIFY_ONLY") {
        Write-Host "$BLUEüîí [–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏]$NC –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor"
        if (-not (Stop-AllCursorProcesses -MaxRetries 3 -WaitSeconds 3)) {
            Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Cursor"
            $userChoice = Read-Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ? (y/n)"
            if ($userChoice -notmatch "^(y|yes)$") {
                return $false
            }
        }
    }

    if (-not (Test-FileAccessibility -FilePath $configPath)) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"
        return $false
    }

    try {
        Write-Host "$BLUEüîç [–í–∞–ª–∏–¥–∞—Ü–∏—è]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
        $originalContent = Get-Content $configPath -Raw -Encoding UTF8 -ErrorAction Stop
        $config = $originalContent | ConvertFrom-Json -ErrorAction Stop
        Write-Host "$GREEN‚úÖ [–í–∞–ª–∏–¥–∞—Ü–∏—è]$NC –§–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

        $telemetryProperties = @('telemetry.machineId', 'telemetry.macMachineId', 'telemetry.devDeviceId', 'telemetry.sqmId')
        foreach ($prop in $telemetryProperties) {
            if ($config.PSObject.Properties[$prop]) {
                $value = $config.$prop
                $displayValue = if ($value.Length -gt 20) { "$($value.Substring(0,20))..." } else { $value }
                Write-Host "$GREEN  ‚úì ${prop}$NC = $displayValue"
            } else {
                Write-Host "$YELLOW  - ${prop}$NC (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ)"
            }
        }
        Write-Host ""
    } catch {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $($_.Exception.Message)"
        Write-Host "$YELLOWüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞'"
        return $false
    }

    $maxRetries = 3
    $retryCount = 0

    while ($retryCount -lt $maxRetries) {
        $retryCount++
        Write-Host ""
        Write-Host "$BLUEüîÑ [–ü–æ–ø—ã—Ç–∫–∞]$NC –ü–æ–ø—ã—Ç–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ $retryCount/$maxRetries..."

        try {
            Write-Host "$BLUE‚è≥ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 1/6 - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞..."
            $MAC_MACHINE_ID = [System.Guid]::NewGuid().ToString()
            $UUID = [System.Guid]::NewGuid().ToString()
            $prefixBytes = [System.Text.Encoding]::UTF8.GetBytes("auth0|user_")
            $prefixHex = -join ($prefixBytes | ForEach-Object { '{0:x2}' -f $_ })
            $randomBytes = New-Object byte[] 32
            $rng = [System.Security.Cryptography.RNGCryptoServiceProvider]::new()
            $rng.GetBytes($randomBytes)
            $randomPart = [System.BitConverter]::ToString($randomBytes) -replace '-',''
            $rng.Dispose()
            $MACHINE_ID = "${prefixHex}${randomPart}"
            $SQM_ID = "{$([System.Guid]::NewGuid().ToString().ToUpper())}"
            Write-Host "$GREEN‚úÖ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 1/6 - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"

            Write-Host "$BLUE‚è≥ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 2/6 - –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π..."
            $backupDir = "$env:APPDATA\Cursor\User\globalStorage\backups"
            if (-not (Test-Path $backupDir)) {
                New-Item -ItemType Directory -Path $backupDir -Force -ErrorAction Stop | Out-Null
            }

            $backupName = "storage.json.backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')_retry$retryCount"
            $backupPath = "$backupDir\$backupName"
            Write-Host "$BLUE‚è≥ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 3/6 - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
            Copy-Item $configPath $backupPath -ErrorAction Stop

            if (Test-Path $backupPath) {
                $backupSize = (Get-Item $backupPath).Length
                $originalSize = (Get-Item $configPath).Length
                if ($backupSize -eq $originalSize) {
                    Write-Host "$GREEN‚úÖ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 3/6 - –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupName"
                } else {
                    Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ"
                }
            } else {
                throw "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
            }

            Write-Host "$BLUE‚è≥ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 4/6 - –ß—Ç–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç—å..."
            $originalContent = Get-Content $configPath -Raw -Encoding UTF8 -ErrorAction Stop
            $config = $originalContent | ConvertFrom-Json -ErrorAction Stop
            Write-Host "$BLUE‚è≥ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 5/6 - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏..."

            $propertiesToUpdate = @{
                'telemetry.machineId' = $MACHINE_ID
                'telemetry.macMachineId' = $MAC_MACHINE_ID
                'telemetry.devDeviceId' = $UUID
                'telemetry.sqmId' = $SQM_ID
            }

            foreach ($property in $propertiesToUpdate.GetEnumerator()) {
                $key = $property.Key
                $value = $property.Value

                if ($config.PSObject.Properties[$key]) {
                    $config.$key = $value
                    Write-Host "$BLUE  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ: ${key}$NC"
                } else {
                    $config | Add-Member -MemberType NoteProperty -Name $key -Value $value -Force
                    Write-Host "$BLUE  + –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ: ${key}$NC"
                }
            }

            Write-Host "$BLUE‚è≥ [–ü—Ä–æ–≥—Ä–µ—Å—Å]$NC 6/6 - –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
            $tempPath = "$configPath.tmp"
            $updatedJson = $config | ConvertTo-Json -Depth 10
            [System.IO.File]::WriteAllText($tempPath, $updatedJson, [System.Text.Encoding]::UTF8)

            $tempContent = Get-Content $tempPath -Raw -Encoding UTF8
            $tempConfig = $tempContent | ConvertFrom-Json
            $tempVerificationPassed = $true
            foreach ($property in $propertiesToUpdate.GetEnumerator()) {
                $key = $property.Key
                $expectedValue = $property.Value
                $actualValue = $tempConfig.$key

                if ($actualValue -ne $expectedValue) {
                    $tempVerificationPassed = $false
                    Write-Host "$RED  ‚úó –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: ${key}$NC"
                    break
                }
            }

            if (-not $tempVerificationPassed) {
                Remove-Item $tempPath -Force -ErrorAction SilentlyContinue
                throw "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
            }

            Remove-Item $configPath -Force
            Move-Item $tempPath $configPath
            $file = Get-Item $configPath
            $file.IsReadOnly = $false

            Write-Host "$BLUEüîç [–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞]$NC –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
            $verifyContent = Get-Content $configPath -Raw -Encoding UTF8
            $verifyConfig = $verifyContent | ConvertFrom-Json
            $verificationPassed = $true
            $verificationResults = @()

            foreach ($property in $propertiesToUpdate.GetEnumerator()) {
                $key = $property.Key
                $expectedValue = $property.Value
                $actualValue = $verifyConfig.$key

                if ($actualValue -eq $expectedValue) {
                    $verificationResults += "‚úì ${key}: —É—Å–ø–µ—à–Ω–æ"
                } else {
                    $verificationResults += "‚úó ${key}: —Å–±–æ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expectedValue}, –ø–æ–ª—É—á–µ–Ω–æ: ${actualValue})"
                    $verificationPassed = $false
                }
            }

            Write-Host "$BLUEüìã [–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏]$NC"
            foreach ($result in $verificationResults) {
                Write-Host "   $result"
            }

            if ($verificationPassed) {
                Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –ü–æ–ø—ã—Ç–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ $retryCount —É—Å–ø–µ—à–Ω–∞!"
                Write-Host ""
                Write-Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                Write-Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:"
                Write-Host "   üîπ machineId: $MACHINE_ID"
                Write-Host "   üîπ macMachineId: $MAC_MACHINE_ID"
                Write-Host "   üîπ devDeviceId: $UUID"
                Write-Host "   üîπ sqmId: $SQM_ID"
                Write-Host ""
                Write-Host "$GREENüíæ [–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ]$NC –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $backupName"

                Write-Host "$BLUEüîí [–ó–∞—â–∏—Ç–∞]$NC –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
                try {
                    $configFile = Get-Item $configPath
                    $configFile.IsReadOnly = $true
                    Write-Host "$GREEN‚úÖ [–ó–∞—â–∏—Ç–∞]$NC –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
                    Write-Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ü—É—Ç—å: $configPath"
                } catch {
                    Write-Host "$YELLOW‚ö†Ô∏è  [–ó–∞—â–∏—Ç–∞]$NC –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ '—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ': $($_.Exception.Message)"
                    Write-Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∞–π–ª–∞"
                }
                Write-Host "$BLUE üîí [–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å]$NC –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor"
                return $true
            } else {
                Write-Host "$RED‚ùå [–°–±–æ–π]$NC –ü–æ–ø—ã—Ç–∫–∞ $retryCount –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
                if ($retryCount -lt $maxRetries) {
                    Write-Host "$BLUEüîÑ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞..."
                    Copy-Item $backupPath $configPath -Force
                    Start-Sleep -Seconds 2
                    continue
                } else {
                    Write-Host "$RED‚ùå [–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ–π]$NC –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
                    Copy-Item $backupPath $configPath -Force
                    return $false
                }
            }

        } catch {
            Write-Host "$RED‚ùå [–ò—Å–∫–ª—é—á–µ–Ω–∏–µ]$NC –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ ${retryCount}: $($_.Exception.Message)"
            Write-Host "$BLUEüí° [–û—Ç–ª–∞–¥–∫–∞]$NC –¢–∏–ø –æ—à–∏–±–∫–∏: $($_.Exception.GetType().FullName)"

            if (Test-Path "$configPath.tmp") {
                Remove-Item "$configPath.tmp" -Force -ErrorAction SilentlyContinue
            }

            if ($retryCount -lt $maxRetries) {
                Write-Host "$BLUEüîÑ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞..."
                if (Test-Path $backupPath) {
                    Copy-Item $backupPath $configPath -Force
                }
                Start-Sleep -Seconds 3
                continue
            } else {
                Write-Host "$RED‚ùå [–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ–π]$NC –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
                if (Test-Path $backupPath) {
                    Write-Host "$BLUEüîÑ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
                    try {
                        Copy-Item $backupPath $configPath -Force
                        Write-Host "$GREEN‚úÖ [–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ]$NC –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                    } catch {
                        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $($_.Exception.Message)"
                    }
                }
                return $false
            }
        }
    }

    Write-Host "$RED‚ùå [–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ–π]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø–æ—Å–ª–µ $maxRetries –ø–æ–ø—ã—Ç–æ–∫"
    return $false
}

function Start-CursorToGenerateConfig {
    Write-Host "$BLUEüöÄ [–ó–∞–ø—É—Å–∫]$NC –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

    $cursorPaths = @(
        "$env:LOCALAPPDATA\Programs\cursor\Cursor.exe",
        "$env:PROGRAMFILES\Cursor\Cursor.exe",
        "$env:PROGRAMFILES(X86)\Cursor\Cursor.exe"
    )

    $cursorPath = $null
    foreach ($path in $cursorPaths) {
        if (Test-Path $path) {
            $cursorPath = $path
            break
        }
    }

    if (-not $cursorPath) {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Cursor –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞"
        return $false
    }

    try {
        Write-Host "$BLUEüìç [–ü—É—Ç—å]$NC –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—É—Ç—å: $cursorPath"
        $process = Start-Process -FilePath $cursorPath -PassThru -WindowStyle Normal
        Write-Host "$GREENüöÄ [–ó–∞–ø—É—Å–∫]$NC Cursor –∑–∞–ø—É—â–µ–Ω, PID: $($process.Id)"

        Write-Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ Cursor (~30 —Å–µ–∫—É–Ω–¥)..."
        Write-Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ó–∞–∫—Ä–æ–π—Ç–µ Cursor –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"

        $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
        $maxWait = 60
        $waited = 0

        while (-not (Test-Path $configPath) -and $waited -lt $maxWait) {
            Start-Sleep -Seconds 2
            $waited += 2
            if ($waited % 10 -eq 0) {
                Write-Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏... ($waited/$maxWait —Å–µ–∫)"
            }
        }

        if (Test-Path $configPath) {
            Write-Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!"
            Write-Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ó–∞–∫—Ä–æ–π—Ç–µ Cursor –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç"
            return $true
        } else {
            Write-Host "$YELLOW‚ö†Ô∏è  [–¢–∞–π–º–∞—É—Ç]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–≤—Ä–µ–º—è"
            Write-Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ Cursor –≤—Ä—É—á–Ω—É—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
            return $false
        }

    } catch {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cursor: $($_.Exception.Message)"
        return $false
    }
}

function Test-Administrator {
    $user = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($user)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

if (-not (Test-Administrator)) {
    Write-Host "$RED[–û—à–∏–±–∫–∞]$NC –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    Write-Host "–©–µ–ª–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'"
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

Clear-Host
Write-Host @"

    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù

"@
Write-Host "$BLUE================================$NC"
Write-Host "$GREENüöÄ   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ Cursor Pro $NC"
Write-Host "$YELLOWüì±  –ö–∞–Ω–∞–ª: „ÄêÁÖéÈ•ºÊûúÂ≠êÂç∑AI„Äë $NC"
Write-Host "$YELLOWü§ù  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Cursor –∏ –ò–ò $NC"
Write-Host "$YELLOWüí°  [–í–∞–∂–Ω–æ] –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –∫–∞–Ω–∞–ª „ÄêÁÖéÈ•ºÊûúÂ≠êÂç∑AI„Äë $NC"
Write-Host ""
Write-Host "$YELLOWüí∞  [–û–±—ä—è–≤–ª–µ–Ω–∏–µ] –ü—Ä–æ–¥–∞–∂–∞ –ª–∏—Ü–µ–Ω–∑–∏–π CursorPro EDU (–≥–∞—Ä–∞–Ω—Ç–∏—è 1 –≥–æ–¥) $NC"
Write-Host "$BLUE================================$NC"

Write-Host ""
Write-Host "$GREENüéØ [–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞]$NC –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
Write-Host ""
Write-Host "$BLUE  1Ô∏è‚É£  –¢–æ–ª—å–∫–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
Write-Host "$YELLOW      ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
Write-Host "$YELLOW      ‚Ä¢ –ò–Ω—ä–µ–∫—Ü–∏—è JS –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã$NC"
Write-Host "$YELLOW      ‚Ä¢ –ë–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö$NC"
Write-Host "$YELLOW      ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫$NC"
Write-Host ""
Write-Host "$BLUE  2Ô∏è‚É£  –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞$NC"
Write-Host "$RED      ‚Ä¢ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å (—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫)$NC"
Write-Host "$RED      ‚Ä¢ ‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã$NC"
Write-Host "$YELLOW      ‚Ä¢ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
Write-Host "$YELLOW      ‚Ä¢ –ò–Ω—ä–µ–∫—Ü–∏—è JS$NC"
Write-Host "$YELLOW      ‚Ä¢ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å$NC"
Write-Host ""

do {
    $userChoice = Read-Host "–í–≤–µ–¥–∏—Ç–µ –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2)"
    if ($userChoice -eq "1") {
        Write-Host "$GREEN‚úÖ [–í—ã–±–æ—Ä]$NC –í—ã–±—Ä–∞–Ω–æ: –¢–æ–ª—å–∫–æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"
        $executeMode = "MODIFY_ONLY"
        break
    } elseif ($userChoice -eq "2") {
        Write-Host "$GREEN‚úÖ [–í—ã–±–æ—Ä]$NC –í—ã–±—Ä–∞–Ω–æ: –°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞"
        Write-Host "$RED‚ö†Ô∏è  [–í–∞–∂–Ω–æ]$NC –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã!"
        $confirmReset = Read-Host "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å (–≤–≤–µ–¥–∏—Ç–µ yes –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"
        if ($confirmReset -eq "yes") {
            $executeMode = "RESET_AND_MODIFY"
            break
        } else {
            Write-Host "$YELLOWüëã [–û—Ç–º–µ–Ω–∞]$NC –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            continue
        }
    } else {
        Write-Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1 –∏–ª–∏ 2"
    }
} while ($true)

Write-Host ""

if ($executeMode -eq "MODIFY_ONLY") {
    Write-Host "$GREENüìã [–ü—Ä–æ—Ü–µ—Å—Å]$NC –†–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:"
    Write-Host "$BLUE  1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Cursor$NC"
    Write-Host "$BLUE  2Ô∏è‚É£  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞$NC"
    Write-Host "$BLUE  3Ô∏è‚É£  –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
    Write-Host "$BLUE  4Ô∏è‚É£  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤$NC"
    Write-Host ""
    Write-Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–∏–º–µ—á–∞–Ω–∏—è]$NC"
    Write-Host "$YELLOW  ‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è$NC"
    Write-Host "$YELLOW  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è$NC"
    Write-Host "$YELLOW  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ$NC"
} else {
    Write-Host "$GREENüìã [–ü—Ä–æ—Ü–µ—Å—Å]$NC –†–µ–∂–∏–º —Å–±—Ä–æ—Å–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
    Write-Host "$BLUE  1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor$NC"
    Write_Host "$BLUE  2Ô∏è‚É£  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏$NC"
    Write_Host "$BLUE  3Ô∏è‚É£  –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã—Ö –ø–∞–ø–æ–∫$NC"
    Write_Host "$BLUE      üìÅ C:\Users\Administrator\.cursor$NC"
    Write_Host "$BLUE      üìÅ C:\Users\Administrator\AppData\Roaming\Cursor$NC"
    Write_Host "$BLUE      üìÅ C:\Users\%USERNAME%\.cursor$NC"
    Write_Host "$BLUE      üìÅ C:\Users\%USERNAME%\AppData\Roaming\Cursor$NC"
    Write_Host "$BLUE  3.5 –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤$NC"
    Write_Host "$BLUE  4Ô∏è‚É£  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Cursor$NC"
    Write_Host "$BLUE  5Ô∏è‚É£  –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–æ 45 —Å–µ–∫)$NC"
    Write_Host "$BLUE  6Ô∏è‚É£  –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Cursor$NC"
    Write_Host "$BLUE  7Ô∏è‚É£  –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞$NC"
    Write_Host "$BLUE  8Ô∏è‚É£  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏$NC"
    Write_Host ""
    Write_Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–∏–º–µ—á–∞–Ω–∏—è]$NC"
    Write_Host "$YELLOW  ‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Cursor –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞$NC"
    Write_Host "$YELLOW  ‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ–∫–Ω–∞ Cursor –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º$NC"
    Write_Host "$YELLOW  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Cursor –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è$NC"
    Write_Host "$YELLOW  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ$NC"
}
Write_Host ""

Write_Host "$GREENü§î [–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ]$NC –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"
$confirmation = Read_Host "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (y/yes –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)"
if ($confirmation -notmatch "^(y|yes)$") {
    Write_Host "$YELLOWüëã [–í—ã—Ö–æ–¥]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    Read_Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 0
}
Write_Host "$GREEN‚úÖ [–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ]$NC –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ"
Write_Host ""

function Get-CursorVersion {
    try {
        $packagePath = "$env:LOCALAPPDATA\\Programs\\cursor\\resources\\app\\package.json"
        if (Test-Path $packagePath) {
            $packageJson = Get-Content $packagePath -Raw | ConvertFrom-Json
            if ($packageJson.version) {
                Write_Host "$GREEN[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –í–µ—Ä—Å–∏—è Cursor: v$($packageJson.version)"
                return $packageJson.version
            }
        }

        $altPath = "$env:LOCALAPPDATA\\cursor\\resources\\app\\package.json"
        if (Test-Path $altPath) {
            $packageJson = Get-Content $altPath -Raw | ConvertFrom-Json
            if ($packageJson.version) {
                Write_Host "$GREEN[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –í–µ—Ä—Å–∏—è Cursor: v$($packageJson.version)"
                return $packageJson.version
            }
        }

        Write_Host "$YELLOW[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –í–µ—Ä—Å–∏—è Cursor –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        return $null
    }
    catch {
        Write_Host "$RED[–û—à–∏–±–∫–∞]$NC –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: $_"
        return $null
    }
}

$cursorVersion = Get-CursorVersion
Write_Host ""
Write_Host "$YELLOWüí° [–í–∞–∂–Ω–æ]$NC –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ 1.0.x"
Write_Host ""

Write_Host "$GREENüîç [–ü—Ä–æ–≤–µ—Ä–∫–∞]$NC –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Cursor..."

function Get-ProcessDetails {
    param($processName)
    Write-Host "$BLUEüîç [–û—Ç–ª–∞–¥–∫–∞]$NC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ ${processName}:"
    Get-WmiObject Win32_Process -Filter "name='$processName'" |
        Select-Object ProcessId, ExecutablePath, CommandLine |
        Format-List
}

$MAX_RETRIES = 5
$WAIT_TIME = 1

function Close-CursorProcessAndSaveInfo {
    param($processName)
    $global:CursorProcessInfo = $null
    $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
    if ($processes) {
        Write_Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å $processName"
        $firstProcess = if ($processes -is [array]) { $processes[0] } else { $processes }
        $processPath = $firstProcess.Path

        if ($processPath -is [array]) {
            $processPath = $processPath[0]
        }

        $global:CursorProcessInfo = @{
            ProcessName = $firstProcess.ProcessName
            Path = $processPath
            StartTime = $firstProcess.StartTime
        }
        Write_Host "$GREENüíæ [–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ]$NC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: $($global:CursorProcessInfo.Path)"
        Get-ProcessDetails $processName
        Write_Host "$YELLOWüîÑ [–î–µ–π—Å—Ç–≤–∏–µ]$NC –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ $processName..."
        Stop-Process -Name $processName -Force

        $retryCount = 0
        while ($retryCount -lt $MAX_RETRIES) {
            $process = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if (-not $process) { break }

            $retryCount++
            if ($retryCount -ge $MAX_RETRIES) {
                Write_Host "$RED‚ùå [–û—à–∏–±–∫–∞]$NC –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å $processName –ø–æ—Å–ª–µ $MAX_RETRIES –ø–æ–ø—ã—Ç–æ–∫"
                Get-ProcessDetails $processName
                Write_Host "$REDüí• [–û—à–∏–±–∫–∞]$NC –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ"
                Read_Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
                exit 1
            }
            Write_Host "$YELLOW‚è≥ [–û–∂–∏–¥–∞–Ω–∏–µ]$NC –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è... ($retryCount/$MAX_RETRIES)"
            Start-Sleep -Seconds $WAIT_TIME
        }
        Write_Host "$GREEN‚úÖ [–£—Å–ø–µ—Ö]$NC $processName —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
    } else {
        Write_Host "$BLUEüí° [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –ü—Ä–æ—Ü–µ—Å—Å $processName –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        $cursorPaths = @(
            "$env:LOCALAPPDATA\Programs\cursor\Cursor.exe",
            "$env:PROGRAMFILES\Cursor\Cursor.exe",
            "$env:PROGRAMFILES(X86)\Cursor\Cursor.exe"
        )

        foreach ($path in $cursorPaths) {
            if (Test-Path $path) {
                $global:CursorProcessInfo = @{
                    ProcessName = "Cursor"
                    Path = $path
                    StartTime = $null
                }
                Write_Host "$GREENüíæ [–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ]$NC –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $path"
                break
            }
        }

        if (-not $global:CursorProcessInfo) {
            Write_Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            $global:CursorProcessInfo = @{
                ProcessName = "Cursor"
                Path = "$env:LOCALAPPDATA\Programs\cursor\Cursor.exe"
                StartTime = $null
            }
        }
    }
}

if (-not (Test-Path $BACKUP_DIR)) {
    try {
        New-Item -ItemType Directory -Path $BACKUP_DIR -Force | Out-Null
        Write_Host "$GREEN‚úÖ [–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–∞]$NC –°–æ–∑–¥–∞–Ω–∞: $BACKUP_DIR"
    } catch {
        Write_Host "$YELLOW‚ö†Ô∏è  [–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ]$NC –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $($_.Exception.Message)"
    }
}

if ($executeMode -eq "MODIFY_ONLY") {
    Write_Host "$GREENüöÄ [–ó–∞–ø—É—Å–∫]$NC –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞..."
    $envCheck = Test-CursorEnvironment -Mode "MODIFY_ONLY"
    if (-not $envCheck.Success) {
        Write_Host ""
        Write_Host "$RED‚ùå [–û—à–∏–±–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è]$NC –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:"
        foreach ($issue in $envCheck.Issues) {
            Write_Host "$RED  ‚Ä¢ ${issue}$NC"
        }
        Write_Host ""
        Write_Host "$YELLOWüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –í—ã–±–µ—Ä–∏—Ç–µ:"
        Write_Host "$BLUE  1Ô∏è‚É£  '–°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞' (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)$NC"
        Write_Host "$BLUE  2Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ$NC"
        Write_Host "$BLUE  3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É Cursor$NC"
        Write_Host ""
        Read_Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        exit 1
    }

    $configSuccess = Modify-MachineCodeConfig -Mode "MODIFY_ONLY"

    if ($configSuccess) {
        Write_Host ""
        Write_Host "$GREENüéâ [–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        Write_Host "$BLUEüîß [–†–µ–µ—Å—Ç—Ä]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞..."
        $registrySuccess = Update-MachineGuid
        Write_Host ""
        Write_Host "$BLUEüîß [–û–±—Ö–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JS-–∏–Ω—ä–µ–∫—Ü–∏–∏..."
        $jsSuccess = Modify-CursorJSFiles

        if ($registrySuccess) {
            Write_Host "$GREEN‚úÖ [–†–µ–µ—Å—Ç—Ä]$NC –°–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            if ($jsSuccess) {
                Write_Host "$GREEN‚úÖ [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –ò–Ω—ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                Write_Host ""
                Write_Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
                Write_Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
                Write_Host "$GREEN  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cursor (storage.json)$NC"
                Write_Host "$GREEN  ‚úì –°–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä (MachineGuid)$NC"
                Write_Host "$GREEN  ‚úì JS-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —è–¥—Ä–æ$NC"
            } else {
                Write_Host "$YELLOW‚ö†Ô∏è  [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –°–±–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã"
                Write_Host ""
                Write_Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
                Write_Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
                Write_Host "$GREEN  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cursor (storage.json)$NC"
                Write_Host "$GREEN  ‚úì –°–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä (MachineGuid)$NC"
                Write_Host "$YELLOW  ‚ö† JS-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —è–¥—Ä–æ (—á–∞—Å—Ç–∏—á–Ω–æ)$NC"
            }
            try {
                $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
                $configFile = Get-Item $configPath
                $configFile.IsReadOnly = $true
                Write_Host "$GREEN‚úÖ [–ó–∞—â–∏—Ç–∞]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
                Write_Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ü—É—Ç—å: $configPath"
            } catch {
                Write_Host "$YELLOW‚ö†Ô∏è  [–ó–∞—â–∏—Ç–∞]$NC –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã: $($_.Exception.Message)"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –≤—Ä—É—á–Ω—É—é"
            }
        } else {
            Write_Host "$YELLOW‚ö†Ô∏è  [–†–µ–µ—Å—Ç—Ä]$NC –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞"
            if ($jsSuccess) {
                Write_Host "$GREEN‚úÖ [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –ò–Ω—ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                Write_Host ""
                Write_Host "$YELLOWüéâ [–ß–∞—Å—Ç–∏—á–Ω–æ]$NC –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∏–∑–º–µ–Ω–µ–Ω"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                Write_Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
                Write_Host "$GREEN  ‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cursor (storage.json)$NC"
                Write_Host "$YELLOW  ‚ö† –°–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä (MachineGuid)$NC"
                Write_Host "$GREEN  ‚úì JS-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —è–¥—Ä–æ$NC"
            } else {
                Write_Host "$YELLOW‚ö†Ô∏è  [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –°–±–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏"
                Write_Host ""
                Write_Host "$YELLOWüéâ [–ß–∞—Å—Ç–∏—á–Ω–æ]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞, —Ä–µ–µ—Å—Ç—Ä –∏ –∏–Ω—ä–µ–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            }
            try {
                $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
                $configFile = Get-Item $configPath
                $configFile.IsReadOnly = $true
                Write_Host "$GREEN‚úÖ [–ó–∞—â–∏—Ç–∞]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
                Write_Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ü—É—Ç—å: $configPath"
            } catch {
                Write_Host "$YELLOW‚ö†Ô∏è  [–ó–∞—â–∏—Ç–∞]$NC –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã: $($_.Exception.Message)"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –≤—Ä—É—á–Ω—É—é"
            }
        }
        Write_Host "$BLUEüí° [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –ó–∞–ø—É—Å—Ç–∏—Ç–µ Cursor –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    } else {
        Write_Host ""
        Write_Host "$RED‚ùå [–°–±–æ–π]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!"
        Write_Host "$YELLOWüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–±—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏—è + –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞'"
    }
} else {
    Write_Host "$GREENüöÄ [–ó–∞–ø—É—Å–∫]$NC –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Å–±—Ä–æ—Å–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    Close-CursorProcessAndSaveInfo "Cursor"
    if (-not $global:CursorProcessInfo) {
        Close-CursorProcessAndSaveInfo "cursor"
    }

    Write_Host ""
    Write_Host "$REDüö® [–í–∞–∂–Ω–æ]$NC ============================================"
    Write_Host "$YELLOW‚ö†Ô∏è  [–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å]$NC Cursor –∏–º–µ–µ—Ç —Å—Ç—Ä–æ–≥—É—é —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç—Ä–æ–ª—è!"
    Write_Host "$YELLOW‚ö†Ô∏è  [–¢—Ä–µ–±—É–µ—Ç—Å—è]$NC –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞"
    Write_Host "$YELLOW‚ö†Ô∏è  [–ó–∞—â–∏—Ç–∞]$NC –¢–æ–ª—å–∫–æ –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"
    Write_Host "$REDüö® [–í–∞–∂–Ω–æ]$NC ============================================"
    Write_Host ""

    Write_Host "$GREENüöÄ [–ó–∞–ø—É—Å–∫]$NC –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏..."
    Remove-CursorTrialFolders
    Restart-CursorAndWait
    $configSuccess = Modify-MachineCodeConfig
    Invoke-CursorInitialization

    if ($configSuccess) {
        Write_Host ""
        Write_Host "$GREENüéâ [–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        Write_Host "$BLUEüîß [–†–µ–µ—Å—Ç—Ä]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞..."
        $registrySuccess = Update-MachineGuid
        Write_Host ""
        Write_Host "$BLUEüîß [–û–±—Ö–æ–¥ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JS-–∏–Ω—ä–µ–∫—Ü–∏–∏..."
        $jsSuccess = Modify-CursorJSFiles

        if ($registrySuccess) {
            Write_Host "$GREEN‚úÖ [–†–µ–µ—Å—Ç—Ä]$NC –°–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
            if ($jsSuccess) {
                Write_Host "$GREEN‚úÖ [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –ò–Ω—ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                Write_Host ""
                Write_Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
                Write_Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
                Write_Host "$GREEN  ‚úì –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã—Ö –ø–∞–ø–æ–∫$NC"
                Write_Host "$GREEN  ‚úì –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è$NC"
                Write_Host "$GREEN  ‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏$NC"
                Write_Host "$GREEN  ‚úì –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
                Write_Host "$GREEN  ‚úì –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞$NC"
                Write_Host "$GREEN  ‚úì JS-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —è–¥—Ä–æ$NC"
            } else {
                Write_Host "$YELLOW‚ö†Ô∏è  [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –°–±–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã"
                Write_Host ""
                Write_Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
                Write_Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
                Write_Host "$GREEN  ‚úì –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã—Ö –ø–∞–ø–æ–∫$NC"
                Write_Host "$GREEN  ‚úì –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è$NC"
                Write_Host "$GREEN  ‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏$NC"
                Write_Host "$GREEN  ‚úì –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
                Write_Host "$GREEN  ‚úì –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞$NC"
                Write_Host "$YELLOW  ‚ö† JS-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —è–¥—Ä–æ (—á–∞—Å—Ç–∏—á–Ω–æ)$NC"
            }
            try {
                $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
                $configFile = Get-Item $configPath
                $configFile.IsReadOnly = $true
                Write_Host "$GREEN‚úÖ [–ó–∞—â–∏—Ç–∞]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
                Write_Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ü—É—Ç—å: $configPath"
            } catch {
                Write_Host "$YELLOW‚ö†Ô∏è  [–ó–∞—â–∏—Ç–∞]$NC –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã: $($_.Exception.Message)"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –≤—Ä—É—á–Ω—É—é"
            }
        } else {
            Write_Host "$YELLOW‚ö†Ô∏è  [–†–µ–µ—Å—Ç—Ä]$NC –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞"
            if ($jsSuccess) {
                Write_Host "$GREEN‚úÖ [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –ò–Ω—ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                Write_Host ""
                Write_Host "$YELLOWüéâ [–ß–∞—Å—Ç–∏—á–Ω–æ]$NC –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–µ—Å—Ç—Ä –Ω–µ –∏–∑–º–µ–Ω–µ–Ω"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                Write_Host "$BLUEüìã [–î–µ—Ç–∞–ª–∏]$NC –í—ã–ø–æ–ª–Ω–µ–Ω–æ:"
                Write_Host "$GREEN  ‚úì –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–Ω—ã—Ö –ø–∞–ø–æ–∫$NC"
                Write_Host "$GREEN  ‚úì –û—á–∏—Å—Ç–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è$NC"
                Write_Host "$GREEN  ‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏$NC"
                Write_Host "$GREEN  ‚úì –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞$NC"
                Write_Host "$YELLOW  ‚ö† –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞$NC"
                Write_Host "$GREEN  ‚úì JS-–∏–Ω—ä–µ–∫—Ü–∏—è –≤ —è–¥—Ä–æ$NC"
            } else {
                Write_Host "$YELLOW‚ö†Ô∏è  [JS-–∏–Ω—ä–µ–∫—Ü–∏—è]$NC –°–±–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏"
                Write_Host ""
                Write_Host "$YELLOWüéâ [–ß–∞—Å—Ç–∏—á–Ω–æ]$NC –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–µ—Å—Ç—Ä –∏ –∏–Ω—ä–µ–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            }
            try {
                $configPath = "$env:APPDATA\Cursor\User\globalStorage\storage.json"
                $configFile = Get-Item $configPath
                $configFile.IsReadOnly = $true
                Write_Host "$GREEN‚úÖ [–ó–∞—â–∏—Ç–∞]$NC –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏"
                Write_Host "$BLUEüí° [–ü–æ–¥—Å–∫–∞–∑–∫–∞]$NC –ü—É—Ç—å: $configPath"
            } catch {
                Write_Host "$YELLOW‚ö†Ô∏è  [–ó–∞—â–∏—Ç–∞]$NC –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã: $($_.Exception.Message)"
                Write_Host "$BLUEüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—Ç—Ä–∏–±—É—Ç –≤—Ä—É—á–Ω—É—é"
            }
        }
    } else {
        Write_Host ""
        Write_Host "$RED‚ùå [–°–±–æ–π]$NC –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!"
        Write_Host "$YELLOWüí° [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è]$NC –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ"
    }
}

Write_Host ""
Write_Host "$GREEN================================$NC"
Write_Host "$YELLOWüì±  –ö–∞–Ω–∞–ª: „ÄêÁÖéÈ•ºÊûúÂ≠êÂç∑AI„Äë - —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ Cursor –∏ –ò–ò $NC"
Write_Host "$GREEN================================$NC"
Write_Host ""

Write_Host "$GREENüéâ [–ó–∞–≤–µ—Ä—à–µ–Ω–æ]$NC –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –º–∞—à–∏–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ Cursor —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!"
Write_Host "$BLUEüí° [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]$NC –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª—É"
Write_Host ""
Read_Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
exit 0